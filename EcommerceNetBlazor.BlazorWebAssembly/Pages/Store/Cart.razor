@page "/cart"

@inject ICartService _cartService
@inject ISaleService _saleService
@inject IToastService _toastService
@inject NavigationManager _navigationManager


@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims


<div class="row mt-4">

    @*    INFORMACION DE LOS PRODUCTOS AGREGADOS EN EL CARRITO*@

    <div class="col-sm-8">
        <div class="card mb-3">

            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-sm bg-light table-bordered">
                        <thead class="table-dark">
                            <tr>
                                <th style="width:102px"></th>
                                <th>Producto</th>
                                <th>Precio</th>
                                <th>Cantidad</th>
                                <th>Total</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>

                            @if (list.Any())
                            {
                                foreach (var item in list)
                                {
                                    <tr>
                                        <td valign="middle">
                                            <img class="card-img-top" src="@item.Product.Image" style="width:100px">
                                        </td>
                                        <td valign="middle">@item.Product.Name</td>
                                        <td valign="middle">@item.Price</td>
                                        <td valign="middle" align="center">
                                            <div class="btn-group" role="group">
                                                <button type="button" class="btn btn-outline-dark" @onclick="(() =>Decrease(item.Product.Id))">
                                                    <i class="oi oi-minus"></i>
                                                </button>
                                                <input class="form-control" readonly="readonly" style="width:50px" @bind-value="item.Quantity" />
                                                <button type="button" class="btn btn-outline-dark" @onclick="(() =>Increment(item.Product.Id))">
                                                    <i class="oi oi-plus"></i>
                                                </button>
                                            </div>
                                        </td>
                                        <td valign="middle">@item.Total</td>
                                        <td valign="middle">
                                            <button type="button" class="btn btn-outline-dark" @onclick="(async () => await Delete(item.Product.Id))">
                                                <i class="oi oi-trash"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }


                            }
                            else
                            {
                                <tr>
                                    <td colspan="6">
                                        <div class="alert alert-warning" role="alert">
                                            No hay productos en el carrito
                                        </div>
                                    </td>
                                </tr>
                            }


                        </tbody>
                    </table>
                </div>


            </div>


        </div>
    </div>

    @*    SE MUESTRA LA INFORMACION DE TARJETA Y OPCION DE PAGAR*@
    <div class="col-sm-4">
        <div class="card mb-3">
            <div class="card-body">
                <EditForm Model="card" OnValidSubmit="ProcessPay">
                    <DataAnnotationsValidator></DataAnnotationsValidator>

                    <div class="mb-2">
                        <label class="form-label">Nombre Titular</label>
                        <input type="text" class="form-control form-control-sm" placeholder="" @bind-value="card.Headline" disabled="@disabled">
                        <ValidationMessage For="@(()=>card.Headline)" />

                    </div>
                    <div class="mb-2">
                        <label class="form-label">Numero Tarjeta</label>
                        <input type="text" class="form-control form-control-sm" placeholder="##############" autocomplete="off" @bind-value="card.Number" disabled="@disabled">
                        <ValidationMessage For="@(()=>card.Number)" />
                    </div>
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="mb-2">
                                <label class="form-label">Vigencia</label>
                                <input type="text" class="form-control form-control-sm" placeholder="MM/YY" autocomplete="off" @bind-value="card.Validity" disabled="@disabled">
                                <ValidationMessage For="@(()=>card.Validity)" />
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="mb-2">
                                <label class="form-label">CVV</label>
                                <input type="text" class="form-control form-control-sm" placeholder="###" autocomplete="off" @bind-value="card.CVV" disabled="@disabled">
                                <ValidationMessage For="@(()=>card.CVV)" />
                            </div>
                        </div>
                    </div>
                    <hr />
                    <div class="d-flex justify-content-between">
                        <div>Total a pagar:</div>
                        <div>S/. @(list.Sum(i => i.Total))</div>
                    </div>
                    <div class="mt-2">
                        <div class="d-grid gap-1">
                            <button class="btn btn-outline-secondary float-end" type="submit" disabled="@disabled">Procesar pago</button>
                        </div>
                    </div>
                </EditForm>

                @* COMENTAR TODO ESTO*@
                <AuthorizeView>
                    <NotAuthorized>
                        <div class="alert alert-danger mt-2" role="alert">
                            Debe iniciar sesion para poder realizar la compra
                        </div>
                    </NotAuthorized>
                </AuthorizeView>


            </div>
        </div>
    </div>
</div>

@code {
    private bool disabled = true;
    private List<CartDTO> list = new List<CartDTO>();
    private decimal? TotalPay = 0;
    private CardDTO card = new CardDTO();

    [CascadingParameter]
    private Task<AuthenticationState> authencationState { get; set; }


    protected override async Task OnInitializedAsync()
    {
        list = await _cartService.GetCart();

        var authState = await authencationState;
        if (authState.User.Identity.IsAuthenticated)
            disabled = false;

    }

    private void Decrease(int id)
    {
        CartDTO item = list.First(p => p.Product.Id == id);

        if (item.Quantity - 1 > 0)
        {
            decimal? precioFinal = (item.Product.PriceOffer != 0 && item.Product.PriceOffer < item.Product.Price) ? item.Product.PriceOffer : item.Product.Price;

            item.Quantity--;
            item.Total = item.Quantity * precioFinal;
        }

    }

    private void Increment(int id)
    {
        CartDTO item = list.First(p => p.Product.Id == id);

        decimal? finalPrice = (item.Product.PriceOffer != 0 && item.Product.PriceOffer < item.Product.Price) ? item.Product.PriceOffer : item.Product.Price;

        item.Quantity++;
        item.Total = item.Quantity * finalPrice;

    }

    private async Task Delete(int id)
    {
        CartDTO product = list.First(p => p.Product.Id == id);

        if (product != null)
        {
            list.Remove(product);
            await _cartService.DeleteCart(id);
        }
    }

    private async Task ProcessPay()
    {
        if (list.Count == 0)
        {
            _toastService.ShowWarning("No se encontraron productos");
            return;
        }

        List<SaleDetailDTO> detail = new List<SaleDetailDTO>();

        foreach (var item in list)
        {
            detail.Add(new SaleDetailDTO()
                {
                    ProductId = item.Product.Id,
                    Quantity = item.Quantity,
                    Total = item.Total
                });
        }

        var authState = await authencationState;
        string userId = authState.User.Claims.Where(c => c.Type == ClaimTypes.NameIdentifier).Select(c => c.Value).Single();

        SaleDTO model = new SaleDTO()
            {
                UserId = userId,
                Total = list.Sum(i => i.Total),
                SalesDetailsDTO = detail
            };

        var response = await _saleService.Register(model);

        if (response.IsSuccess)
        {
            await _cartService.ClearCart();
            _toastService.ShowSuccess("Venta registrada");
            _navigationManager.NavigateTo("/catalog");
        }
        else
        {
            _toastService.ShowError(response.Message);
        }


    }

}
