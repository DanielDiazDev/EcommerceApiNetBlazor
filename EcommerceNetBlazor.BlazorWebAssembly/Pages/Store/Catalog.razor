@page "/"
@page "/catalog"

@inject ICategoryService _categoryService
@inject IProductService _productService
@inject NavigationManager _navigationManager

<div class="row justify-content-center mt-3 mb-4">

    <div class="col-sm-6 col-md-8 col-xl-9">
        <div class="input-group mb-3">
            <input type="text" class="form-control" placeholder="Buscar producto..." @bind-value="find">
            <button class="btn btn-outline-secondary" type="button" @onclick="(async () => await  GetCatalog())">
                <i class="oi oi-magnifying-glass"></i>
            </button>
        </div>
    </div>
</div>



<div class="row">
    <div class="col-sm-3">


        <div class="card">
            <div class="card-header text-white bg-dark">
                Categorias
            </div>
            <div class="card-body">
                @if (listCategory != null)
                {
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="category" id="Todos" value="Todos"
                        @onchange="RadioSelection"
                               checked=@(categorySelected.Equals("Todos"))>
                        <label class="form-check-label" for="Todos">
                            Todos
                        </label>
                    </div>

                    @foreach (var item in listCategory)
                    {
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="category" id="@item.Id" value="@item.Name"
                            @onchange="RadioSelection"
                                   checked=@(categorySelected.Equals(item.Name, StringComparison.OrdinalIgnoreCase))>
                            <label class="form-check-label" for="@item.Id">
                                @item.Name
                            </label>
                        </div>
                    }
                }
                else
                {
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                }
            </div>

        </div>

    </div>

    <div class="col-sm-9">
        <div class="row gx-4 row-cols-1 row-cols-md-3 row-cols-xl-4 justify-content-start">
            @if (listProduct != null)
            {
                foreach (var item in listProduct)
                {
                    <div class="col mb-5">
                        <div class="card h-100">
                            <!-- Sale badge-->
                            @if (item.CreatedDate.HasValue && DateTime.Now < item.CreatedDate.Value.AddDays(30))
                            {
                                <div class="badge bg-primary text-white position-absolute" style="top: 0.5rem; right: 0.5rem">Nuevo</div>
                            }


                            <!-- Product image-->
                            <img class="card-img-top border-dark border-1" src="@item.Image" style="width:100%;height:250px">
                            <!-- Product details-->
                            <div class="card-body p-4">
                                <div class="text-center">
                                    <!-- Product name-->
                                    <h5 class="fw-bolder">@item.Name</h5>
                                    <!-- Product price-->
                                    @if (item.PriceOffer != 0 && item.PriceOffer < item.Price)
                                    {
                                        <span class="text-danger text-decoration-line-through">S/. @item.Price</span>
                                        <span>S /.@item.PriceOffer</span>
                                    }
                                    else
                                    {
                                        <span>S /.@item.Price</span>
                                    }
                                </div>
                            </div>
                            <!-- Product actions-->
                            <div class="card-footer p-3 pt-0 border-top-0 bg-transparent">
                                <div class="text-center"><a class="btn btn-outline-dark mt-auto" href="/detail/@item.Id">Ver producto</a></div>
                            </div>
                        </div>
                    </div>
                }


            }
            else
            {
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
        </div>
    </div>
</div>



@code {
    private List<CategoryDTO>? listCategory = null;
    private List<ProductDTO>? listProduct = null;
    private string find = "";
    private string categorySelected = "Todos";

    private async Task GetCategories(string value = "")
    {
        var response = await _categoryService.List(value);
        if (response.IsSuccess)
        {
            listCategory = (List<CategoryDTO>)response.Result!;
        }
        else
        {
            listCategory = new List<CategoryDTO>();
        }

    }

    private async Task GetCatalog()
    {
        var response = await _productService.Catalog(categorySelected, find);
        if (response.IsSuccess)
        {
            listProduct = (List<ProductDTO>)response.Result!;
        }
        else
        {
            listProduct = new List<ProductDTO>();
        }
    }

    private async Task RadioSelection(ChangeEventArgs args)
    {
        categorySelected = args.Value.ToString();
        find = "";
        await GetCatalog();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetCategories();
        await GetCatalog();
    }



}
