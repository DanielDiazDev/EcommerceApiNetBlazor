@page "/product"
@page "/product/{Id:int}"

@inject ICategoryService _categoryService
@inject IProductService _productService
@inject IToastService _toastService
@inject NavigationManager _navigationManager

@attribute [Authorize(Roles = "Administrator")];


<div class="row justify-content-center  mt-3">
    <p class="col-sm-12 col-md-8 col-xl-10 h4 mt-2">@title</p>
</div>
<div class="row justify-content-center  mt-3">
    <div class="col-sm-12 col-md-8 col-xl-10">

        <EditForm Model="model" OnValidSubmit="SaveChanges">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="input-group">
                <span class="input-group-text bg-light" id="basic-addon3">Nombre</span>
                <input type="text" class="form-control" @bind-value="model.Name">
            </div>
            <ValidationMessage For="@(()=>model.Name)" />

            <div class="input-group  mt-3">
                <span class="input-group-text bg-light">Descripcion</span>
                <textarea class="form-control" @bind="model.Description"></textarea>

            </div>
            <ValidationMessage For="@(()=>model.Description)" />

            <div class="input-group mt-3">
                <label class="input-group-text bg-light" for="inputGroupSelect01">Categoria</label>
                <select class="form-select" value="@model.CategoryId" @onchange="ChangeCategory">
                    @foreach (var item in listCategory)
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                </select>
            </div>

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Precio</span>
                <input type="number" class="form-control" @bind-value="model.Price">
            </div>
            <ValidationMessage For="@(()=>model.Price)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Precio Oferta</span>
                <input type="number" class="form-control" @bind-value="model.PriceOffer">
            </div>
            <ValidationMessage For="@(()=>model.PriceOffer)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Cantidad</span>
                <input type="number" class="form-control" @bind-value="model.Quantity">
            </div>
            <ValidationMessage For="@(()=>model.Quantity)" />

            <div class="input-group mt-3">
                <label class="input-group-text bg-light">Imagen</label>
                <InputFile type="file" class="form-control" accept="image/png, image/gif, image/jpeg" OnChange="OnFileChange"></InputFile>
            </div>

            <div class="mt-3">
                <button type="submit" class="btn btn-primary" style="width:130px">@button</button>
                <a href="/products" class="btn btn-secondary" style="width:130px">Volver</a>
            </div>
        </EditForm>




    </div>

</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private string title = "Nuevo Producto";
    private string button = "Crear";
    private List<CategoryDTO> listCategory = new List<CategoryDTO>();
    private ProductDTO model = new ProductDTO();

    protected override async Task OnInitializedAsync()
    {
        var response = await _categoryService.List("");
        if (response.IsSuccess)
        {
            listCategory = (List<CategoryDTO>)response.Result!;
            if (listCategory.Any() && Id == 0)
            {
                model.CategoryId = listCategory.First().Id;
            }
        }
    }


    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            title = "Editar Producto";
            button = "Actualizar";

            var response = await _productService.Get(Id);
            if (response.IsSuccess!)
            {
                model = (ProductDTO)response.Result!;
            }
            else
                _toastService.ShowWarning(response.Message);
        }

    }

    void ChangeCategory(ChangeEventArgs e)
    {
        model.CategoryId = Convert.ToInt32(e.Value.ToString());
    }


    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        FileInfo fileInfo = new FileInfo(e.File.Name);

        if (fileInfo.Extension.ToLower().Contains(".jpg") || fileInfo.Extension.ToLower().Contains(".png"))
        {
            var format = $"image/{fileInfo.Extension.Replace(".", "")}";
            var resizeImage = await e.File.RequestImageFileAsync(format, 450, 300);
            var buffer = new byte[resizeImage.Size];
            await resizeImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            model.Image = imageData;
        }

    }


    private async Task SaveChanges()
    {
        bool correct = true;
        string message = string.Empty;

        if (Id != 0)
        {
            var response = await _productService.Edit(model);
            if (response.IsSuccess)
            {
                message = "Producto fue modificado";
            }
            else
            {
                correct = false;
                message = "No pudo editar";
            }
        }
        else
        {
            var response = await _productService.Create(model);
            if (response.IsSuccess)
            {
                message = "Producto fue creado";
            }
            else
            {
                correct = false;
                message = "No pudo crear";
            }

        }

        if (correct)
        {
            _toastService.ShowSuccess(message);
            _navigationManager.NavigateTo("/products");
        }
        else
            _toastService.ShowWarning(message);

    }
}
